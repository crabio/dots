syntax = "proto3";

package spot.v1;
option go_package = "github.com/iakrevetkho/archaeopteryx_example;user";

// Spot service is controlling game spots
service SpotService {
  rpc CreateSpot (CreateSpotRequest) returns (CreateSpotResponse) {}

  rpc GetSpot (GetSpotRequest) returns (GetSpotResponse) {}
  
  rpc JoinToSpot (JoinToSpotRequest) returns (JoinToSpotResponse) {}

  // GetSpotPlayers returns stream of players in spot
  // If new player will be connected to spot, it will be sent
  rpc GetSpotPlayers (GetSpotPlayersRequest) returns (stream GetSpotPlayersResponse) {}

  rpc StartSpot (StartSpotRequest) returns (StartSpotResponse) {}

  rpc IsPlayerHunter (IsPlayerHunterRequest) returns (IsPlayerHunterResponse) {}

  rpc SubSessionEvent (SubSessionEventRequest) returns (stream SubSessionEventResponse) {}

  rpc SendPlayerPosition (stream SendPlayerPositionRequest) returns (SendPlayerPositionResponse) {}
  
  // GetPlayersStates returns stream of all players data (this player and others)
  // Data will be received on each new position or health status
  rpc GetPlayersStates (GetPlayersStatesRequest) returns (stream GetPlayersStatesResponse) {}

  // SubZoneEvent returns stream of zones events
  rpc SubZoneEvent (SubZoneEventRequest) returns (stream SubZoneEventResponse) {}
  
  rpc GetLastZoneEvent (GetLastZoneEventRequest) returns (GetLastZoneEventResponse) {}
}

// RPC structures

message CreateSpotRequest {
  Position position = 1;
  float radius_in_m = 2;
  int32 scan_period_in_seconds = 3;
  int32 zone_period_in_seconds = 4;
}

message CreateSpotResponse {
  string spot_uuid = 1;
}

message GetSpotRequest {
  string spot_uuid = 1;
}

message GetSpotResponse {
  Position position = 1;
  float radius_in_m = 2;
  int32 scan_period_in_seconds = 3;
  int32 zone_period_in_seconds = 4;
}

message JoinToSpotRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
}

message JoinToSpotResponse {
}

message GetSpotPlayersRequest {
  string spot_uuid = 1;
}

message GetSpotPlayersResponse {
  // List with players UUIDs
  repeated string players_list = 1;
}

message StartSpotRequest {
  string spot_uuid = 1;
}

message StartSpotResponse {
}

message IsPlayerHunterRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
}

message IsPlayerHunterResponse {
  bool is_hunter = 1;
}

message SubSessionEventRequest {
  string spot_uuid = 1;
}

message SubSessionEventResponse {
  oneof event {
    StartSessionEvent start_session_event = 1;
    EndSessionEvent stop_session_event = 2;
  }
}

message StartSessionEvent {}

message EndSessionEvent {
  bool hunter_wins = 1;
}

message SendPlayerPositionRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
  Position position = 3;
}

message SendPlayerPositionResponse {}

message GetPlayersStatesRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
}

message GetPlayersStatesResponse {
  PlayerState player_state = 1;
}

message SubZoneEventRequest {
  string spot_uuid = 1;
}

message SubZoneEventResponse {
  oneof event {
    StartNextZoneTimerEvent start_next_zone_timer_event = 1;
    StartZoneDelayTimerEvent start_zone_delay_timer_event = 2;
    ZoneTickEvent zone_tick_event = 3;
  }
}

message GetLastZoneEventRequest {
  string spot_uuid = 1;
}

message GetLastZoneEventResponse {
  oneof event {
    StartNextZoneTimerEvent start_next_zone_timer_event = 1;
    StartZoneDelayTimerEvent start_zone_delay_timer_event = 2;
    ZoneTickEvent zone_tick_event = 3;
  }
}

message StartNextZoneTimerEvent {
  ZoneState current_zone  =1;
	int64 next_zone_timestamp =2;
}

message StartZoneDelayTimerEvent {
  ZoneState current_zone  =1;
	ZoneState next_zone  =2;
	int64 zone_tick_start_timestamp =3;
}

message ZoneTickEvent {
  ZoneState current_zone  =1;
	ZoneState next_zone  =2;
}

// Non RPC structures

message PlayerState {
  string player_uuid = 1;
  Position position = 2;
  float health = 3;
}

message ZoneState {
  Position position = 1;
  float radius_in_m =2;
  float damage = 3;
}

message Position {
  double longitude = 1;
  double latitude = 2;
}