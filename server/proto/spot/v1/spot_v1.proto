syntax = "proto3";

package spot.v1;
option go_package = "github.com/iakrevetkho/archaeopteryx_example;user";

// Spot service is controlling game spots
service SpotService {
  rpc CreateSpot (CreateSpotRequest) returns (CreateSpotResponse) {}

  rpc GetSpot (GetSpotRequest) returns (GetSpotResponse) {}
  
  rpc JoinToSpot (JoinToSpotRequest) returns (JoinToSpotResponse) {}

  rpc StartSpot (StartSpotRequest) returns (StartSpotResponse) {}

  rpc SendPlayerPosition (stream SendPlayerPositionRequest) returns (SendPlayerPositionResponse) {}
  
  // GetPlayersStates returns stream of all players data (this player and others)
  // Data will be received on each new position or health status
  rpc GetPlayersStates (GetPlayersStatesRequest) returns (stream GetPlayersStatesResponse) {}
}

// RPC structures

message CreateSpotRequest {
  Position position = 1;
  int32 radius = 2;
  int32 scan_period_in_seconds = 3;
  int32 zone_period_in_seconds = 4;
  int32 session_duration_in_seconds = 5;
}

message CreateSpotResponse {
  string spot_uuid = 1;
}

message GetSpotRequest {
  string spot_uuid = 1;
}

message GetSpotResponse {
  Position position = 1;
  int32 radius = 2;
  int32 scan_period_in_seconds = 3;
  int32 zone_period_in_seconds = 4;
  int32 session_duration_in_seconds = 5;
}

message JoinToSpotRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
}

message JoinToSpotResponse {
}

message StartSpotRequest {
  string spot_uuid = 1;
}

message StartSpotResponse {
}

message SendPlayerPositionRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
  Position position = 3;
}

message SendPlayerPositionResponse {}

message GetPlayersStatesRequest {
  string spot_uuid = 1;
  string player_uuid = 2;
}

message GetPlayersStatesResponse {
  PlayerState player_state = 1;
}

// Non RPC structures

message PlayerState {
  string player_uuid = 1;
  Position position = 2;
  int32 health = 3;
}

message Position {
  double longitude = 1;
  double latitude = 2;
}