// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotServiceClient is the client API for SpotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotServiceClient interface {
	CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*CreateSpotResponse, error)
	GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotResponse, error)
	SendPlayerPosition(ctx context.Context, opts ...grpc.CallOption) (SpotService_SendPlayerPositionClient, error)
	GetPlayersStates(ctx context.Context, in *GetPlayersStatesRequest, opts ...grpc.CallOption) (SpotService_GetPlayersStatesClient, error)
}

type spotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotServiceClient(cc grpc.ClientConnInterface) SpotServiceClient {
	return &spotServiceClient{cc}
}

func (c *spotServiceClient) CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*CreateSpotResponse, error) {
	out := new(CreateSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/CreateSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotResponse, error) {
	out := new(GetSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/GetSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) SendPlayerPosition(ctx context.Context, opts ...grpc.CallOption) (SpotService_SendPlayerPositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[0], "/spot.v1.SpotService/SendPlayerPosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceSendPlayerPositionClient{stream}
	return x, nil
}

type SpotService_SendPlayerPositionClient interface {
	Send(*SendPlayerPositionRequest) error
	CloseAndRecv() (*SendPlayerPositionResponse, error)
	grpc.ClientStream
}

type spotServiceSendPlayerPositionClient struct {
	grpc.ClientStream
}

func (x *spotServiceSendPlayerPositionClient) Send(m *SendPlayerPositionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spotServiceSendPlayerPositionClient) CloseAndRecv() (*SendPlayerPositionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendPlayerPositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) GetPlayersStates(ctx context.Context, in *GetPlayersStatesRequest, opts ...grpc.CallOption) (SpotService_GetPlayersStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[1], "/spot.v1.SpotService/GetPlayersStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceGetPlayersStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_GetPlayersStatesClient interface {
	Recv() (*GetPlayersStatesResponse, error)
	grpc.ClientStream
}

type spotServiceGetPlayersStatesClient struct {
	grpc.ClientStream
}

func (x *spotServiceGetPlayersStatesClient) Recv() (*GetPlayersStatesResponse, error) {
	m := new(GetPlayersStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpotServiceServer is the server API for SpotService service.
// All implementations must embed UnimplementedSpotServiceServer
// for forward compatibility
type SpotServiceServer interface {
	CreateSpot(context.Context, *CreateSpotRequest) (*CreateSpotResponse, error)
	GetSpot(context.Context, *GetSpotRequest) (*GetSpotResponse, error)
	SendPlayerPosition(SpotService_SendPlayerPositionServer) error
	GetPlayersStates(*GetPlayersStatesRequest, SpotService_GetPlayersStatesServer) error
	mustEmbedUnimplementedSpotServiceServer()
}

// UnimplementedSpotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpotServiceServer struct {
}

func (UnimplementedSpotServiceServer) CreateSpot(context.Context, *CreateSpotRequest) (*CreateSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpot not implemented")
}
func (UnimplementedSpotServiceServer) GetSpot(context.Context, *GetSpotRequest) (*GetSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpot not implemented")
}
func (UnimplementedSpotServiceServer) SendPlayerPosition(SpotService_SendPlayerPositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPlayerPosition not implemented")
}
func (UnimplementedSpotServiceServer) GetPlayersStates(*GetPlayersStatesRequest, SpotService_GetPlayersStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayersStates not implemented")
}
func (UnimplementedSpotServiceServer) mustEmbedUnimplementedSpotServiceServer() {}

// UnsafeSpotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotServiceServer will
// result in compilation errors.
type UnsafeSpotServiceServer interface {
	mustEmbedUnimplementedSpotServiceServer()
}

func RegisterSpotServiceServer(s grpc.ServiceRegistrar, srv SpotServiceServer) {
	s.RegisterService(&SpotService_ServiceDesc, srv)
}

func _SpotService_CreateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).CreateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/CreateSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).CreateSpot(ctx, req.(*CreateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_GetSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).GetSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/GetSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).GetSpot(ctx, req.(*GetSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_SendPlayerPosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpotServiceServer).SendPlayerPosition(&spotServiceSendPlayerPositionServer{stream})
}

type SpotService_SendPlayerPositionServer interface {
	SendAndClose(*SendPlayerPositionResponse) error
	Recv() (*SendPlayerPositionRequest, error)
	grpc.ServerStream
}

type spotServiceSendPlayerPositionServer struct {
	grpc.ServerStream
}

func (x *spotServiceSendPlayerPositionServer) SendAndClose(m *SendPlayerPositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spotServiceSendPlayerPositionServer) Recv() (*SendPlayerPositionRequest, error) {
	m := new(SendPlayerPositionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SpotService_GetPlayersStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlayersStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).GetPlayersStates(m, &spotServiceGetPlayersStatesServer{stream})
}

type SpotService_GetPlayersStatesServer interface {
	Send(*GetPlayersStatesResponse) error
	grpc.ServerStream
}

type spotServiceGetPlayersStatesServer struct {
	grpc.ServerStream
}

func (x *spotServiceGetPlayersStatesServer) Send(m *GetPlayersStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SpotService_ServiceDesc is the grpc.ServiceDesc for SpotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spot.v1.SpotService",
	HandlerType: (*SpotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpot",
			Handler:    _SpotService_CreateSpot_Handler,
		},
		{
			MethodName: "GetSpot",
			Handler:    _SpotService_GetSpot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPlayerPosition",
			Handler:       _SpotService_SendPlayerPosition_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPlayersStates",
			Handler:       _SpotService_GetPlayersStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spot/v1/spot_v1.proto",
}
