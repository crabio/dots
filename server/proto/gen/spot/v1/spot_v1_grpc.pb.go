// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotServiceClient is the client API for SpotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotServiceClient interface {
	CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*CreateSpotResponse, error)
	GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotResponse, error)
	JoinToSpot(ctx context.Context, in *JoinToSpotRequest, opts ...grpc.CallOption) (*JoinToSpotResponse, error)
	// GetSpotPlayers returns stream of players in spot
	// If new player will be connected to spot, it will be sent
	GetSpotPlayers(ctx context.Context, in *GetSpotPlayersRequest, opts ...grpc.CallOption) (SpotService_GetSpotPlayersClient, error)
	StartSpot(ctx context.Context, in *StartSpotRequest, opts ...grpc.CallOption) (*StartSpotResponse, error)
	IsPlayerHunter(ctx context.Context, in *IsPlayerHunterRequest, opts ...grpc.CallOption) (*IsPlayerHunterResponse, error)
	SubSessionEvent(ctx context.Context, in *SubSessionEventRequest, opts ...grpc.CallOption) (SpotService_SubSessionEventClient, error)
	SendPlayerPosition(ctx context.Context, opts ...grpc.CallOption) (SpotService_SendPlayerPositionClient, error)
	// GetPlayersStates returns stream of all players data (this player and others)
	// Data will be received on each new position or health status
	GetPlayersStates(ctx context.Context, in *GetPlayersStatesRequest, opts ...grpc.CallOption) (SpotService_GetPlayersStatesClient, error)
	// SubZoneEvent returns stream of zones events
	SubZoneEvent(ctx context.Context, in *SubZoneEventRequest, opts ...grpc.CallOption) (SpotService_SubZoneEventClient, error)
	GetLastZoneEvent(ctx context.Context, in *GetLastZoneEventRequest, opts ...grpc.CallOption) (*GetLastZoneEventResponse, error)
}

type spotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotServiceClient(cc grpc.ClientConnInterface) SpotServiceClient {
	return &spotServiceClient{cc}
}

func (c *spotServiceClient) CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*CreateSpotResponse, error) {
	out := new(CreateSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/CreateSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*GetSpotResponse, error) {
	out := new(GetSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/GetSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) JoinToSpot(ctx context.Context, in *JoinToSpotRequest, opts ...grpc.CallOption) (*JoinToSpotResponse, error) {
	out := new(JoinToSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/JoinToSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) GetSpotPlayers(ctx context.Context, in *GetSpotPlayersRequest, opts ...grpc.CallOption) (SpotService_GetSpotPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[0], "/spot.v1.SpotService/GetSpotPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceGetSpotPlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_GetSpotPlayersClient interface {
	Recv() (*GetSpotPlayersResponse, error)
	grpc.ClientStream
}

type spotServiceGetSpotPlayersClient struct {
	grpc.ClientStream
}

func (x *spotServiceGetSpotPlayersClient) Recv() (*GetSpotPlayersResponse, error) {
	m := new(GetSpotPlayersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) StartSpot(ctx context.Context, in *StartSpotRequest, opts ...grpc.CallOption) (*StartSpotResponse, error) {
	out := new(StartSpotResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/StartSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) IsPlayerHunter(ctx context.Context, in *IsPlayerHunterRequest, opts ...grpc.CallOption) (*IsPlayerHunterResponse, error) {
	out := new(IsPlayerHunterResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/IsPlayerHunter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotServiceClient) SubSessionEvent(ctx context.Context, in *SubSessionEventRequest, opts ...grpc.CallOption) (SpotService_SubSessionEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[1], "/spot.v1.SpotService/SubSessionEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceSubSessionEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_SubSessionEventClient interface {
	Recv() (*SubSessionEventResponse, error)
	grpc.ClientStream
}

type spotServiceSubSessionEventClient struct {
	grpc.ClientStream
}

func (x *spotServiceSubSessionEventClient) Recv() (*SubSessionEventResponse, error) {
	m := new(SubSessionEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) SendPlayerPosition(ctx context.Context, opts ...grpc.CallOption) (SpotService_SendPlayerPositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[2], "/spot.v1.SpotService/SendPlayerPosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceSendPlayerPositionClient{stream}
	return x, nil
}

type SpotService_SendPlayerPositionClient interface {
	Send(*SendPlayerPositionRequest) error
	CloseAndRecv() (*SendPlayerPositionResponse, error)
	grpc.ClientStream
}

type spotServiceSendPlayerPositionClient struct {
	grpc.ClientStream
}

func (x *spotServiceSendPlayerPositionClient) Send(m *SendPlayerPositionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spotServiceSendPlayerPositionClient) CloseAndRecv() (*SendPlayerPositionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendPlayerPositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) GetPlayersStates(ctx context.Context, in *GetPlayersStatesRequest, opts ...grpc.CallOption) (SpotService_GetPlayersStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[3], "/spot.v1.SpotService/GetPlayersStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceGetPlayersStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_GetPlayersStatesClient interface {
	Recv() (*GetPlayersStatesResponse, error)
	grpc.ClientStream
}

type spotServiceGetPlayersStatesClient struct {
	grpc.ClientStream
}

func (x *spotServiceGetPlayersStatesClient) Recv() (*GetPlayersStatesResponse, error) {
	m := new(GetPlayersStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) SubZoneEvent(ctx context.Context, in *SubZoneEventRequest, opts ...grpc.CallOption) (SpotService_SubZoneEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpotService_ServiceDesc.Streams[4], "/spot.v1.SpotService/SubZoneEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &spotServiceSubZoneEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpotService_SubZoneEventClient interface {
	Recv() (*SubZoneEventResponse, error)
	grpc.ClientStream
}

type spotServiceSubZoneEventClient struct {
	grpc.ClientStream
}

func (x *spotServiceSubZoneEventClient) Recv() (*SubZoneEventResponse, error) {
	m := new(SubZoneEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spotServiceClient) GetLastZoneEvent(ctx context.Context, in *GetLastZoneEventRequest, opts ...grpc.CallOption) (*GetLastZoneEventResponse, error) {
	out := new(GetLastZoneEventResponse)
	err := c.cc.Invoke(ctx, "/spot.v1.SpotService/GetLastZoneEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotServiceServer is the server API for SpotService service.
// All implementations must embed UnimplementedSpotServiceServer
// for forward compatibility
type SpotServiceServer interface {
	CreateSpot(context.Context, *CreateSpotRequest) (*CreateSpotResponse, error)
	GetSpot(context.Context, *GetSpotRequest) (*GetSpotResponse, error)
	JoinToSpot(context.Context, *JoinToSpotRequest) (*JoinToSpotResponse, error)
	// GetSpotPlayers returns stream of players in spot
	// If new player will be connected to spot, it will be sent
	GetSpotPlayers(*GetSpotPlayersRequest, SpotService_GetSpotPlayersServer) error
	StartSpot(context.Context, *StartSpotRequest) (*StartSpotResponse, error)
	IsPlayerHunter(context.Context, *IsPlayerHunterRequest) (*IsPlayerHunterResponse, error)
	SubSessionEvent(*SubSessionEventRequest, SpotService_SubSessionEventServer) error
	SendPlayerPosition(SpotService_SendPlayerPositionServer) error
	// GetPlayersStates returns stream of all players data (this player and others)
	// Data will be received on each new position or health status
	GetPlayersStates(*GetPlayersStatesRequest, SpotService_GetPlayersStatesServer) error
	// SubZoneEvent returns stream of zones events
	SubZoneEvent(*SubZoneEventRequest, SpotService_SubZoneEventServer) error
	GetLastZoneEvent(context.Context, *GetLastZoneEventRequest) (*GetLastZoneEventResponse, error)
	mustEmbedUnimplementedSpotServiceServer()
}

// UnimplementedSpotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpotServiceServer struct {
}

func (UnimplementedSpotServiceServer) CreateSpot(context.Context, *CreateSpotRequest) (*CreateSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpot not implemented")
}
func (UnimplementedSpotServiceServer) GetSpot(context.Context, *GetSpotRequest) (*GetSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpot not implemented")
}
func (UnimplementedSpotServiceServer) JoinToSpot(context.Context, *JoinToSpotRequest) (*JoinToSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinToSpot not implemented")
}
func (UnimplementedSpotServiceServer) GetSpotPlayers(*GetSpotPlayersRequest, SpotService_GetSpotPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpotPlayers not implemented")
}
func (UnimplementedSpotServiceServer) StartSpot(context.Context, *StartSpotRequest) (*StartSpotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSpot not implemented")
}
func (UnimplementedSpotServiceServer) IsPlayerHunter(context.Context, *IsPlayerHunterRequest) (*IsPlayerHunterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerHunter not implemented")
}
func (UnimplementedSpotServiceServer) SubSessionEvent(*SubSessionEventRequest, SpotService_SubSessionEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubSessionEvent not implemented")
}
func (UnimplementedSpotServiceServer) SendPlayerPosition(SpotService_SendPlayerPositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPlayerPosition not implemented")
}
func (UnimplementedSpotServiceServer) GetPlayersStates(*GetPlayersStatesRequest, SpotService_GetPlayersStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayersStates not implemented")
}
func (UnimplementedSpotServiceServer) SubZoneEvent(*SubZoneEventRequest, SpotService_SubZoneEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubZoneEvent not implemented")
}
func (UnimplementedSpotServiceServer) GetLastZoneEvent(context.Context, *GetLastZoneEventRequest) (*GetLastZoneEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastZoneEvent not implemented")
}
func (UnimplementedSpotServiceServer) mustEmbedUnimplementedSpotServiceServer() {}

// UnsafeSpotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotServiceServer will
// result in compilation errors.
type UnsafeSpotServiceServer interface {
	mustEmbedUnimplementedSpotServiceServer()
}

func RegisterSpotServiceServer(s grpc.ServiceRegistrar, srv SpotServiceServer) {
	s.RegisterService(&SpotService_ServiceDesc, srv)
}

func _SpotService_CreateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).CreateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/CreateSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).CreateSpot(ctx, req.(*CreateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_GetSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).GetSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/GetSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).GetSpot(ctx, req.(*GetSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_JoinToSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).JoinToSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/JoinToSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).JoinToSpot(ctx, req.(*JoinToSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_GetSpotPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSpotPlayersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).GetSpotPlayers(m, &spotServiceGetSpotPlayersServer{stream})
}

type SpotService_GetSpotPlayersServer interface {
	Send(*GetSpotPlayersResponse) error
	grpc.ServerStream
}

type spotServiceGetSpotPlayersServer struct {
	grpc.ServerStream
}

func (x *spotServiceGetSpotPlayersServer) Send(m *GetSpotPlayersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpotService_StartSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).StartSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/StartSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).StartSpot(ctx, req.(*StartSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_IsPlayerHunter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerHunterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).IsPlayerHunter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/IsPlayerHunter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).IsPlayerHunter(ctx, req.(*IsPlayerHunterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotService_SubSessionEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubSessionEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).SubSessionEvent(m, &spotServiceSubSessionEventServer{stream})
}

type SpotService_SubSessionEventServer interface {
	Send(*SubSessionEventResponse) error
	grpc.ServerStream
}

type spotServiceSubSessionEventServer struct {
	grpc.ServerStream
}

func (x *spotServiceSubSessionEventServer) Send(m *SubSessionEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpotService_SendPlayerPosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpotServiceServer).SendPlayerPosition(&spotServiceSendPlayerPositionServer{stream})
}

type SpotService_SendPlayerPositionServer interface {
	SendAndClose(*SendPlayerPositionResponse) error
	Recv() (*SendPlayerPositionRequest, error)
	grpc.ServerStream
}

type spotServiceSendPlayerPositionServer struct {
	grpc.ServerStream
}

func (x *spotServiceSendPlayerPositionServer) SendAndClose(m *SendPlayerPositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spotServiceSendPlayerPositionServer) Recv() (*SendPlayerPositionRequest, error) {
	m := new(SendPlayerPositionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SpotService_GetPlayersStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlayersStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).GetPlayersStates(m, &spotServiceGetPlayersStatesServer{stream})
}

type SpotService_GetPlayersStatesServer interface {
	Send(*GetPlayersStatesResponse) error
	grpc.ServerStream
}

type spotServiceGetPlayersStatesServer struct {
	grpc.ServerStream
}

func (x *spotServiceGetPlayersStatesServer) Send(m *GetPlayersStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpotService_SubZoneEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubZoneEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotServiceServer).SubZoneEvent(m, &spotServiceSubZoneEventServer{stream})
}

type SpotService_SubZoneEventServer interface {
	Send(*SubZoneEventResponse) error
	grpc.ServerStream
}

type spotServiceSubZoneEventServer struct {
	grpc.ServerStream
}

func (x *spotServiceSubZoneEventServer) Send(m *SubZoneEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpotService_GetLastZoneEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastZoneEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotServiceServer).GetLastZoneEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spot.v1.SpotService/GetLastZoneEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotServiceServer).GetLastZoneEvent(ctx, req.(*GetLastZoneEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotService_ServiceDesc is the grpc.ServiceDesc for SpotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spot.v1.SpotService",
	HandlerType: (*SpotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpot",
			Handler:    _SpotService_CreateSpot_Handler,
		},
		{
			MethodName: "GetSpot",
			Handler:    _SpotService_GetSpot_Handler,
		},
		{
			MethodName: "JoinToSpot",
			Handler:    _SpotService_JoinToSpot_Handler,
		},
		{
			MethodName: "StartSpot",
			Handler:    _SpotService_StartSpot_Handler,
		},
		{
			MethodName: "IsPlayerHunter",
			Handler:    _SpotService_IsPlayerHunter_Handler,
		},
		{
			MethodName: "GetLastZoneEvent",
			Handler:    _SpotService_GetLastZoneEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSpotPlayers",
			Handler:       _SpotService_GetSpotPlayers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubSessionEvent",
			Handler:       _SpotService_SubSessionEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendPlayerPosition",
			Handler:       _SpotService_SendPlayerPosition_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPlayersStates",
			Handler:       _SpotService_GetPlayersStates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubZoneEvent",
			Handler:       _SpotService_SubZoneEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spot/v1/spot_v1.proto",
}
